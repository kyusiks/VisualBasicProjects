
/**
 * [ [#변수02]Svc.java ]
 *
 * - 클래스(입력) 설명 -<br>
 *
 * [#변수03]
 *
 * @author [#변수00]
 * @version 1.0
 * @since [#변수01]
 */
/*
 *===================================== 변경내역 ==================================
 * 일련번호     신규(변경)일자       변경자         변경내용         변경근거
 *================================================================================
 * 001          [#변수01]           [#변수00]
 *================================================================================
 */
package [#변수04];

import java.sql.Connection;

import com.ibk.pccs.com.cm.CommonPccs;
import com.ibk.pccs.com.cm.ServiceConst;
import com.ibk.pccs.com.util.DataCollection;
import com.ibkit.util.DataRequest;
import com.ibkit.util.DataResponse;
import com.ibkit.util.Log;

public class [#변수02]Svc extends CommonPccs {
    public void init() {
    }
    public void destory() {
    }
    public void bizService(DataRequest req, DataResponse rsp) throws Exception {
        Log.Debug(this, ">>> [#변수02]Svc.bizService()");
        String strCmd = req.getParameterValue(ServiceConst.CMD, "");

        if [#IF|#체크00](strCmd.equals(ServiceConst.LIST_VIEW)) {
            doListView(req, rsp);
        } else if [#/IF][#IF|#체크01](strCmd.equals(ServiceConst.INSERT)) {
            doInsert(req, rsp);
        } else if [#/IF][#IF|#체크02](strCmd.equals(ServiceConst.UPDATE)) {
            doUpdate(req, rsp);
        } else if [#/IF][#IF|#체크03](strCmd.equals(ServiceConst.DELETE)) {
            doDelete(req, rsp);
        } else [#/IF]{
            doInit(req, rsp);
        }
        Log.Debug(this, "<<< [#변수02]Svc.bizService()");
    }
    /**
     * 화면 로딩
     * @throws Exception
     */
    private void doInit(DataRequest req, DataResponse rsp) throws Exception {
        Log.Debug(this, ">>> [#변수02]Svc.doInit()");
        [#IF|#체크07]putBrComboValue("취급모점", "전체", rsp);
        [#/IF]rsp.setResultForm("[#변수05][#변수02]");
        Log.Debug(this, "<<< [#변수02]Svc.doInit()");
    }w
[#IF|#체크01]
    /**
     * 추가
     */
    private void doInsert(DataRequest req, DataResponse rsp) throws Exception {
        Log.Debug(this, ">>> [#변수02]Svc.doInsert()");
        rsp.setMakeXML(true);
        /***********************************************************************
         * 0. 입력파라미터 => DataCollection : DataRequest 데이터를 DataCollection으로 변환
         **********************************************************************/

        DataCollection dcInsert = new DataCollection();
        super.putDataRequestToDataCollection(req, dcInsert);
        putSessionToDataCollection(dcInsert);

        Connection con = null;
        con = getConnection();

        try {
            /*******************************************************************
             * 1. 비지니스 로직 호출 : 비지니스 클래스 호출시 Connection을 생성자로 넘겨준다
             ******************************************************************/
            [#변수02]Biz  biz[#변수02] = new [#변수02]Biz(con);
            biz[#변수02].doInsert(dcInsert);


        } catch (Exception e) {
            /*******************************************************************
             * 서비스 실패 : 서비스 과정을 try 예외 처리를 해줘야 한다. : 로직 오류 결과 메시지를 DataResponse에
             * 설정해준다.
             ******************************************************************/
            super.putFailureCode(e.getMessage(), rsp);
            throw e;
        } finally {

        }

        /***********************************************************************
         * 서비스 성공시
         **********************************************************************/
        putSuccessCode(" 등록되었습니다.", rsp);
        Log.Debug(this, "<<< [#변수02]Svc.doInsert()");
    }
[#/IF][#IF|#체크02]
    /**
     * 수정
     */
    private void doUpdate(DataRequest req, DataResponse rsp) throws Exception {
        Log.Debug(this, ">>> [#변수02]Svc.doUpdate()");
        rsp.setMakeXML(true);
        /***********************************************************************
         * 0. 입력파라미터 => DataCollection : DataRequest 데이터를 DataCollection으로 변환
         **********************************************************************/

        DataCollection dcUpdate = new DataCollection();
        super.putDataRequestToDataCollection(req, dcUpdate);
        putSessionToDataCollection(dcUpdate);
        Connection con = null;
        con = getConnection();

        try {
            /*******************************************************************
             * 1. 비지니스 로직 호출 : 비지니스 클래스 호출시 Connection을 생성자로 넘겨준다
             ******************************************************************/
            [#변수02]Biz  biz[#변수02] = new [#변수02]Biz(con);
            biz[#변수02].doUpdate(dcUpdate);

        } catch (Exception e) {
            /*******************************************************************
             * 서비스 실패 : 서비스 과정을 try 예외 처리를 해줘야 한다. : 로직 오류 결과 메시지를 DataResponse에
             * 설정해준다.
             ******************************************************************/
            super.putFailureCode(e.getMessage(), rsp);
            throw e;
        } finally {

        }

        /***********************************************************************
         * 서비스 성공시
         * 
         **********************************************************************/
        putSuccessCode(" 수정되었습니다.", rsp);
        Log.Debug(this, "<<< [#변수02]Svc.doUpdate()");
    }
[#/IF][#IF|#체크03]
    /**
     * 삭제
     */
    private void doDelete(DataRequest req, DataResponse rsp) throws Exception {
        Log.Debug(this, ">>> [#변수02]Svc.doDelete()");

        rsp.setMakeXML(true);
        /***********************************************************************
         * 0. 입력파라미터 => DataCollection : DataRequest 데이터를 DataCollection으로 변환
         **********************************************************************/

        DataCollection dcDelete = new DataCollection();
        super.putDataRequestToDataCollection(req, dcDelete);
        putSessionToDataCollection(dcDelete);
        Connection con = null;
        con = getConnection();

        try {
            /*******************************************************************
             * 1. 비지니스 로직 호출 : 비지니스 클래스 호출시 Connection을 생성자로 넘겨준다
             ******************************************************************/
            [#변수02]Biz  biz[#변수02] = new [#변수02]Biz(con);
            biz[#변수02].doDelete(dcDelete);

        } catch (Exception e) {
            /*******************************************************************
             * 서비스 실패 : 서비스 과정을 try 예외 처리를 해줘야 한다. : 로직 오류 결과 메시지를 DataResponse에
             * 설정해준다.
             ******************************************************************/
            super.putFailureCode(e.getMessage(), rsp);
            throw e;
        } finally {

        }

        /***********************************************************************
         * 서비스 성공시
         * 
         **********************************************************************/
        putSuccessCode("삭제되었습니다.", rsp);
        Log.Debug(this, "<<< [#변수02]Svc.doDelete()");
    }
[#/IF][#IF|#체크00]
    /**
     * 목록 조회
     */
    private void doListView(DataRequest req, DataResponse rsp) throws Exception {
        Log.Debug(this, ">>> [#변수02]Svc.doListView()");

        rsp.setMakeXML(true);

        DataCollection dcListView = new DataCollection();
        super.putDataRequestToDataCollection(req, dcListView);

        Connection con = null;
        con = getConnection();

        try {
            
             /*******************************************************************
             * 1. 비지니스 로직 호출 : 비지니스 클래스 호출시 Connection을 생성자로 넘겨준다
             ******************************************************************/
            [#변수02]Biz  biz[#변수02] = new [#변수02]Biz(con);
            
            /*******************************************************************
             * 그룹 데이터 조회 : 그룹 데이터 결과는 DataSet을 DataRsponse에 그룹이름으로 저장한다.
             ******************************************************************/
            
            dcListView = biz[#변수02].doListView(dcListView);
            super.putDataSetToDataResponse(dcListView.getDataSet("GridList"), rsp);
            

        } catch (Exception e) {
            super.putFailureCode(e.getMessage(), rsp);
            throw e;
        } finally {
        }

        putSuccessCode("조회되었습니다.", rsp);
        Log.Debug(this, "<<< [#변수02]Svc.doListView()");
    }
[#/IF]
}



/**
 * [ [#변수02]Biz.java ]
 *
 * - 클래스(입력) 설명 -<br>
 *
 * [#변수03]
 *
 * @author [#변수00]
 * @version 1.0
 * @since [#변수01]
 */
/*
 *===================================== 변경내역 ==================================
 * 일련번호     신규(변경)일자       변경자         변경내용         변경근거
 *================================================================================
 * 001          [#변수01]           [#변수00]
 *================================================================================
 */
package [#변수04];

import java.sql.Connection;

import com.ibk.pccs.com.util.LoggableStatement;
import java.util.List;
import com.ibk.pccs.com.cm.CommonBIZ;
import com.ibk.pccs.com.util.DataCollection;
import com.ibk.pccs.tbl.dao.[#변수06]Dao;
import com.ibk.pccs.tbl.entity.[#변수06]Ent;
import com.ibkit.util.Log;

public class [#변수02]Biz extends CommonBIZ {
public [#변수02]Biz(Connection con) {
        super(con);
    }
[#IF|#체크01]
    /**
     * 추가
     */
    public DataCollection doInsert(DataCollection dcInsert) throws Exception {
        Log.Debug(this, ">>> [#변수02]Biz.doInsert()");

        /***********************************************************************
         * 0. 프로그램에 사용될 변수 선언
         **********************************************************************/
        LoggableStatement ps_I = null;
        Connection con = null;

        try {
            // 서비스 클래스에서 전달한 Connection
            // 비지니스 클래스에서는 getBizConnection()으로 리턴
            con = getBizConnection();
            /*******************************************************************
             * 1. INPUT DATA 추출
             ******************************************************************/
            String str22    = dcInsert.getParameter("22"   , "");
            /*******************************************************************
             * 2. 중복체크
             ******************************************************************/
            [#변수06]Dao [#변수07]Dao = new [#변수06]Dao();
            [#변수06]Ent [#변수07]Ent = new [#변수06]Ent();
            ps_I = [#변수07]Dao.getSelectPreparedStatement(con, ps_I, [#변수07]Ent);

            [#변수07]Ent.set55(str55);

            // SELECT 수행
            // - Set Entity
            List list = [#변수07]Dao.select(ps_I, [#변수07]Ent);
            if (list.size() > 0) {
                throw new Exception("공통코드 등록 중복입니다.");
            }
            /*******************************************************************
             * 3. 입력
             ******************************************************************/
            [#변수06]Ent [#변수07]Ent_ITEM = new [#변수06]Ent();
            [#변수07]Ent_ITEM = new [#변수06]Ent();

            [#변수07]Ent_ITEM.set22(str22);

            ps_I = [#변수07]Dao.getInsertPreparedStatement(con, ps_I, [#변수07]Ent_ITEM);
            iCntInsert = [#변수07]Dao.insert(ps_I, [#변수07]Ent_ITEM);
        } catch (Exception e) {
            throw e;
        } finally {
            /*
             * 함수에서 사용한 PreparedStatement는 반드시 close()
             */
            if (ps_I != null) {
                ps_I.close();
            }
        }
        Log.Debug(this, "<<< [#변수02]Biz.doInsert()");
        return dcInsert;
    }
[#/IF][#IF|#체크02]
    /**
     * 수정
     */
    public void doUpdate(DataCollection dcUpdate) throws Exception {
        Log.Debug(this, ">>> [#변수02]Biz.doUpdate()");
        /***********************************************************************
         * 0. 프로그램에 사용될 변수 선언
         **********************************************************************/
        LoggableStatement ps_U = null;
        Connection con = null;

        try {
            // 서비스 클래스에서 전달한 Connection
            // 비지니스 클래스에서는 getBizConnection()으로 리턴
            con = getBizConnection();
            /*******************************************************************
             * 1. INPUT DATA 추출
             ******************************************************************/
            String str33    = dcUpdate.getParameter("33"   , "");
            /*******************************************************************
             * 2.PREPARED Statement
             ******************************************************************/
            [#변수06]Ent where[#변수07]Ent = new [#변수06]Ent();
            where[#변수07]Ent.set55(str55);
            [#변수06]Ent set[#변수07]Ent = new [#변수06]Ent();
            set[#변수07]Ent.set33(str33);
            /*******************************************************************
             * 3. 입력
             ******************************************************************/
            [#변수06]Dao [#변수07]Dao = new [#변수06]Dao();

            ps_U = [#변수07]Dao.getUpdatePreparedStatement(con, ps_U, set[#변수07]Ent, where[#변수07]Ent);
            iCntUpdate = [#변수07]Dao.update(ps_U, set[#변수07]Ent, where[#변수07]Ent);
        } catch (Exception e) {
            throw e;
        } finally {
            /*
             * 함수에서 사용한 PreparedStatement는 반드시 close()
             */
            if (ps_U != null) {
                ps_U.close();
            }
        }
        Log.Debug(this, "<<< [#변수02]Biz.doUpdate()");
    }
[#/IF][#IF|#체크03]
    /**
     * 삭제
     */
    public void doDelete(DataCollection dcDeleteFromSvc) throws Exception {
        Log.Debug(this, ">>> [#변수02]Biz.doDelete()");
        /***********************************************************************
         * 0. 프로그램에 사용될 변수 선언
         **********************************************************************/
        LoggableStatement ps_D = null;
        Connection con = null;

        try {
            // 서비스 클래스에서 전달한 Connection
            // 비지니스 클래스에서는 getBizConnection()으로 리턴
            con = getBizConnection();
            /*******************************************************************
             * 1. INPUT DATA 추출
             ******************************************************************/
            String str44    = dcDeleteFromSvc.getParameter("44"   , "");
            /*******************************************************************
             * 2.PREPARED Statement
             ******************************************************************/
            [#변수06]Ent where[#변수07]Ent = new [#변수06]Ent();
            where[#변수07]Ent.set55(str55);
            [#변수06]Ent set[#변수07]Ent = new [#변수06]Ent();
            set[#변수07]Ent.set44(str44);
            /*******************************************************************
             * 3. 입력
             ******************************************************************/
            [#변수06]Dao [#변수07]Dao = new [#변수06]Dao();

            ps_D = [#변수07]Dao.getUpdatePreparedStatement(con, ps_D, set[#변수07]Ent, where[#변수07]Ent);
            iCntUpdate = [#변수07]Dao.update(ps_D, set[#변수07]Ent, where[#변수07]Ent);
        } catch (Exception e) {
            throw e;
        } finally {
            /*
             * 함수에서 사용한 PreparedStatement는 반드시 close()
             */
            if (ps_D != null) {
                ps_D.close();
            }
        }
        Log.Debug(this, "<<< [#변수02]Biz.doDelete()");
    }
[#/IF][#IF|#체크00]
    /**
     * 목록 조회
     */
    public DataCollection doListView(DataCollection dcListViewFromSvc) throws Exception {
        Log.Debug(this, ">>> [#변수02]Biz.doListView()");
        /***********************************************************************
         * 1.INPUT DATA 추출
         **********************************************************************/
        String str11    = dcListViewFromSvc.getParameter("11"   , "");
        /***********************************************************************
         * 2.목록조회
         **********************************************************************/
        [#변수02]Dao dao000= new [#변수02]Dao(getBizConnection());
        dcListViewFromSvc.setDataSet("GridList", dao000.selectList(str11));
        Log.Debug(this, "<<< [#변수02]Biz.doListView()");
        return dcListViewFromSvc;
    }
[#/IF]
}


/**
 * [ [#변수02]Dao.java ]
 *
 * - 클래스(입력) 설명 -<br>
 *
 * [#변수03]
 *
 * @author [#변수00]
 * @version 1.0
 * @since [#변수01]
 */
/*
 *===================================== 변경내역 ==================================
 * 일련번호     신규(변경)일자       변경자         변경내용         변경근거
 *================================================================================
 * 001          [#변수01]           [#변수00]
 *================================================================================
 */
package [#변수04];

import java.sql.Connection;

import com.ibk.pccs.com.util.LoggableStatement;
import com.ibk.pccs.com.cm.CommonDAO;
import com.ibk.pccs.com.util.DataSet;
import com.ibkit.util.Log;

public class [#변수02]Dao extends CommonDAO {
    public [#변수02]Dao() {
        super();
    }
    public [#변수02]Dao(Connection Con) {
        super(Con);
    }
[#IF|#체크00]
    /**
     * 기관코드 목록조회
     *
     * @param :
     *
     *
     * @throws Exception
     */

    public DataSet selectList(String str11) throws Exception {
        Log.Debug(this, ">>> [#변수02]Dao.selectList()");
        /***********************************************************************
         * 0.프로그램사용 변수 선언
         **********************************************************************/
        Connection con = null;
        LoggableStatement ps_S = null;

        DataSet dsSelect = new DataSet();

        try {
            con = getConnection();

            StringBuffer sbSql = new StringBuffer();

            ps_S = new LoggableStatement(con, sbSql.toString());
            
            sbSql.append(" \n"); // 
            sbSql.append(" \n"); // 
            sbSql.append(" \n"); // 
            sbSql.append(" \n"); // 
            sbSql.append("   AND (11    = ? OR 1 = DECODE (?, NULL, '1'))   \n");
            
            int index = 1 ;
            
            ps_S.setString(index++, str11   );
            ps_S.setString(index++, str11   );

            dsSelect.set(ps_S.executeQuery());
        } catch (Exception ex) {
            throw ex;
        } finally {
            if (ps_S != null) {
                ps_S.close();
            }
        }

        Log.Debug(this, "<<< [#변수02]Dao.selectList()");
        return dsSelect;
    }
[#/IF]
}



// 전역변수 정의
var gErrMsg         = '';   //  에러메시지 변수
var gCmdValue       = '';   //  서비스 분기 COMMAND
var gClassPath      = 'iFrame?Class=[#변수04].[#변수02]Svc';

// 화면 초기화
function fnInit() {

    ievent.setEvent();
		frmSearch.cmbHNDL_MBCD.value = document.all.SESSION_BLNG_BRCD.value;
		frmSearch.txtSEARCH_YMD.value = idate.addDateYMDFormat(idate.getToday());
		frmSearch.txtSEARCH_SYMD.value = idate.addDateYMDFormat(idate.getToday());
		frmSearch.txtSEARCH_EYMD.value = idate.addDateYMDFormat(idate.getToday());
    initButtonWithAuth('btnReg', 'btnMod', 'btnDel', 'btnExl', 'btnPrt');
    fnButtonEnable('Init');
}// END OF fnInit()
[#IF|#체크01]
//등록
function fnInsert(fnct_cd) {
	// 서비스 CMD 설정
	g_CmdValue = iconst.INSERT;

	//현재 처리중이면 return;
	if(ing.isIng())	{
		return;
	}

	// 화면 입력 값 유효성 검사
	if(!ievent.validate(frmDetail))	{
		return;
	}

	// 등록 확인 메시지 창
	if(!confirm(iconst.INSERT_QUESTION)) {
		return;
	}

	if(ing.show()) {

		iajax.openSync(gClassPath);

                var 22    = iobject.getValue(frmSearch.txt22);

                iajax.addParam("22"   ,22   );

		iajax.addParam(iconst.CMD    , g_CmdValue);
		iajax.addParam(iconst.FNCT_CD, fnct_cd);

		iajax.send();

		var resultCode = iajax.getValue(iconst.RESULT_CODE);
		var resultMsg  = iajax.getValue(iconst.RESULT_MSG);
		// 거래 성공 여부

		if ( resultCode == iconst.SUCCESS_CODE ) {
			// 그리드를 다시 조회 해야 하는 경우 프로그래스 창 닫는다
			ing.hide();
			fnListView();
		}
		else {
			ing.hide();
			fnCheckAjaxResult(resultCode, resultMsg);
		}
	}
}// END OF fnInsert()
[#/IF][#IF|#체크02]
// 수정
function fnUpdate(fnct_cd) {
	// 서비스 CMD 설정
	g_CmdValue = iconst.UPDATE;
	if(ing.isIng())	{
		return;
	}

	// 화면 입력 값 유효성 검사
	if(!ievent.validate(frmDetail))	{
		return;
	}

	// 수정 확인 메시지 창
	if(!confirm(iconst.UPDATE_QUESTION )) {
		return;
	}
	if(ing.show()) {

		iajax.openSync(gClassPath);

                var 33    = iobject.getValue(frmSearch.txt33);

                iajax.addParam("33"   ,33   );

		iajax.addParam(iconst.CMD    , g_CmdValue);
		iajax.addParam(iconst.FNCT_CD, fnct_cd);

		iajax.send();

		var resultCode = iajax.getValue(iconst.RESULT_CODE);
		var resultMsg  = iajax.getValue(iconst.RESULT_MSG);

		// 거래 성공 여부
		if ( resultCode == iconst.SUCCESS_CODE ){
			ing.hide();
			// grid에서 PK값에 해당하는 컬럼명과 데이터를 저장
			//fnSaveGridPk("grid", "SBCD", "POLC_CD", "POLC_CLSF_CD");
			fnListView();
			// grid에 PK값에 해당하는 row 선택 event 발생
			//fnLoadGridPk("grid");
		}
		else {
			ing.hide();
			fnCheckAjaxResult(resultCode, resultMsg);
		}
	}

}// END OF fnUpdate()
[#/IF][#IF|#체크03]
// 삭제
function fnDelete(fnct_cd) {
	// 서비스 CMD 설정
	g_CmdValue = iconst.DELETE;
	if(ing.isIng())	{
		return;
	}

	// 화면 입력 값 유효성 검사
	if(!ievent.validate(frmDetail))	{
		return;
	}
	// 삭제 확인 메시지 창
	if(!confirm(iconst.DELETE_QUESTION)) {
		return;
	}
	if(ing.show()) {
		iajax.openSync(gClassPath);

                var 44    = iobject.getValue(frmSearch.txt44);

                iajax.addParam("44"   ,44   );

		iajax.addParam(iconst.CMD,  g_CmdValue);
		iajax.addParam(iconst.FNCT_CD, fnct_cd);
		iajax.send();

		var resultCode = iajax.getValue(iconst.RESULT_CODE);
		var resultMsg = iajax.getValue(iconst.RESULT_MSG);
		// 거래 성공 여부
		if ( resultCode == iconst.SUCCESS_CODE ){
			// 그리드를 다시 조회 해야 하는 경우 프로그래스 창 닫는다
			ing.hide();
			fnListView();
		}
		else {
			ing.hide();
			fnCheckAjaxResult(resultCode, resultMsg);
		}
	}

}// END OF fnDelete()
[#/IF][#IF|#체크00]

// 조회 (그리드)
function fnListView() {
	// 서비스 CMD 설정
	g_CmdValue = iconst.LIST_VIEW;

	if(ing.isIng())	{
		return;
	}

	if(ing.show()) {

		iajax.openSync(gClassPath);

                var 11    = iobject.getValue(frmSearch.txt11);

                iajax.addParam("11"   ,11   );

		iajax.addParam(iconst.CMD,  g_CmdValue);
		iajax.send();

		var resultCode = iajax.getValue(iconst.RESULT_CODE);
		var resultMsg = iajax.getValue(iconst.RESULT_MSG);
		// 거래 성공 여부
		if ( resultCode == iconst.SUCCESS_CODE ) {
			ing.hide();

			// ajax로 부터의 결과 XML데이터를 그리드에 로드
			frmDetail.grid.LoadXML("GridList", iajax.getText());


		}
		else {
			ing.hide();
			fnCheckAjaxResult(resultCode, resultMsg);
		}
	}
}// END OF fnListView()
[#/IF][#IF|#체크06]
// 그리드 데이터 화면 객체 값 매핑
function fnSetDataFromGrid(nRow, nCol) {
	/*
	frmDetailInit();
	var grid = frmDetail.grid;
	var SBCD = grid.GetCellDataByName(nRow,"SBCD");
	frmDetail.txtSBCD.value = SBCD;
	fnStyleChange(frmDetail.txtSBCD, "edt_ReadonlyLft", true);
	*/
}// END OF fnsetDataFromGrid()

//그리드 선택시 필수 항목 readonly로 세팅
function fnStyleChange(obj, className , readOnly) {
	if ( ! obj ) {
		alert("OBJECT가 존재하지 않습니다.");
		return;
	}
	var type = ( obj.length > 1 ) ?  obj[0].type : obj.type;
	if ( type == "radio" || type == "combo") {
		for ( var i=0 ; i<obj.length; i++ ){
			obj[i].disabled = readOnly;
		}
	} else{
		obj.readOnly  = ( readOnly ) ? true : false;
		obj.className = className;
	}
}// END OF fnStyleChange();

// 화면 입력 객체 값 초기화
function fnClear(){
	frmSearchInit();
	frmDetailInit();
	frmDetail.grid.InitGrid();
	fnButtonEnable('Init');
}// END OF fnClear()
// 검색 FORM 기본값으로 세팅
function frmSearchInit() {
	iutil.reset(frmSearch);
}// END OF frmSearchInit()
// 세부 FORM 기본값으로 세팅
function frmDetailInit() {
	iutil.reset(frmDetail);
}// END OF frmDetailInit()
[#/IF]

// 버튼 동적 컨트롤
function fnButtonEnable(pAction) {
    if(pAction == 'Init') {
        setButtonAbleWithAuth([#IF|#체크01]'btnReg', true, [#/IF][#IF|#체크02]'btnMod', false, [#/IF][#IF|#체크03]'btnDel', false, [#/IF][#IF|#체크04]'btnExl', false, [#/IF][#IF|#체크05]'btnPrt', false,[#/IF]);
    } else if(pAction == 'GridSelect') {
        setButtonAbleWithAuth([#IF|#체크01]'btnReg', false, [#/IF][#IF|#체크02]'btnMod', true, [#/IF][#IF|#체크03]'btnDel', true, [#/IF][#IF|#체크04]'btnExl', true, [#/IF][#IF|#체크05]'btnPrt', true, [#/IF]);
    }
}// END OF fnButtonEnable()

//엔터 키 입력시 이벤트 발생
document.onkeydown=fnCheckEnter;
function fnCheckEnter() {
	if (event) {
		if (event.keyCode) {
			if ( event.keyCode == 13 && fnEnterZoneCheck(event.srcElement, frmSearch) ) {
				fnListView();
			}
		}
	}
}// END OF fnCheckEnter()
[#IF|#체크04]
//엑셀
function fnExcel() {
	frmDetail.grid.ExportXmlDataToExcel();
}
[#/IF][#IF|#체크05]
//프린트
function fnPrint() {
	frmDetail.grid.doPrint();
}
[#/IF]

function fnPopUp()
{
	var FNFU_SBCD = frmSearch.txtFNFU_SBCD.value;
	var rtnValue = Js_SbcdPopUp(FNFU_SBCD);
	
	if( rtnValue != null ) {
		frmSearch.txtFNFU_SBCD.value = rtnValue.FNFU_SBCD;
		frmSearch.txtFNFU_SUBJ_NM.value = rtnValue.FNFU_SUBJ_NM;
	}
}